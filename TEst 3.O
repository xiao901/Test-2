-- Mobile-Compatible Delta Executor Script (Full Version with Joystick)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- ===== GUI SETUP =====
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CustomMenuGUI"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = game:GetService("CoreGui")

-- Menu Button
local menuButton = Instance.new("TextButton")
menuButton.Size = UDim2.new(0,70,0,70)
menuButton.Position = UDim2.new(1,-80,0,50)
menuButton.BackgroundColor3 = Color3.fromRGB(0,0,0)
menuButton.TextColor3 = Color3.fromRGB(255,255,255)
menuButton.Text = "MENU"
menuButton.Font = Enum.Font.SourceSansBold
menuButton.TextSize = 18
menuButton.Parent = screenGui
menuButton.ZIndex = 10

-- Menu Frame
local menuFrame = Instance.new("Frame")
menuFrame.Size = UDim2.new(0,400,0,500)
menuFrame.Position = UDim2.new(0.5,-200,0.5,-250)
menuFrame.BackgroundColor3 = Color3.fromRGB(30,30,30)
menuFrame.Visible = false
menuFrame.Parent = screenGui

local layout = Instance.new("UIListLayout")
layout.FillDirection = Enum.FillDirection.Vertical
layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
layout.VerticalAlignment = Enum.VerticalAlignment.Top
layout.Padding = UDim.new(0,10)
layout.Parent = menuFrame

-- ===== DRAG FUNCTION =====
local function makeDraggable(frame)
    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                       startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

makeDraggable(menuButton)
makeDraggable(menuFrame)

menuButton.MouseButton1Click:Connect(function()
    menuFrame.Visible = not menuFrame.Visible
end)

-- ===== FEATURE SYSTEM =====
local features = {}
local function createToggle(name, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1,-10,0,60)
    container.BackgroundTransparency = 1
    container.Parent = menuFrame

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0,150,0,60)
    button.Position = UDim2.new(0,5,0,0)
    button.BackgroundColor3 = Color3.fromRGB(50,50,50)
    button.TextColor3 = Color3.fromRGB(255,255,255)
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 24
    button.Text = name
    button.Parent = container

    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(0,100,0,60)
    status.Position = UDim2.new(0,170,0,0)
    status.BackgroundTransparency = 1
    status.TextColor3 = Color3.fromRGB(255,255,255)
    status.Font = Enum.Font.SourceSansBold
    status.TextSize = 24
    status.Text = "Off"
    status.Parent = container

    features[name] = false

    button.MouseButton1Click:Connect(function()
        features[name] = not features[name]
        status.Text = features[name] and "On" or "Off"
        callback(features[name])
    end)
end

-- ===== ESP =====
local function highlightCharacter(character)
    if not character then return end
    if character:FindFirstChild("PlayerHighlight") then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "PlayerHighlight"
    highlight.Adornee = character
    highlight.FillColor = Color3.fromRGB(0,255,0)
    highlight.OutlineColor = Color3.fromRGB(255,255,255)
    highlight.Parent = character
end

local function setESP(state)
    if state then
        for _,player in ipairs(Players:GetPlayers()) do
            if player.Character then highlightCharacter(player.Character) end
        end
    else
        for _,player in ipairs(Players:GetPlayers()) do
            if player.Character then
                local h = player.Character:FindFirstChild("PlayerHighlight")
                if h then h:Destroy() end
            end
        end
    end
end
createToggle("ESP", setESP)

-- ===== Aimbot =====
local aimbotEnabled = false
local aimbotOption = "Head"
local aimbotSmoothness = 0.15

local function getNearestPlayer()
    local closestDist = math.huge
    local closestPlayer = nil
    for _,player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local part = (aimbotOption=="Head" and player.Character:FindFirstChild("Head")) or player.Character:FindFirstChild("HumanoidRootPart")
            if part then
                local screenPos,onScreen = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X,screenPos.Y)-Vector2.new(Mouse.X or 0,Mouse.Y or 0)).Magnitude
                    if dist < closestDist then
                        closestDist = dist
                        closestPlayer = player
                    end
                end
            end
        end
    end
    return closestPlayer
end

RunService.RenderStepped:Connect(function()
    if aimbotEnabled then
        local target = getNearestPlayer()
        if target and target.Character then
            local part = (aimbotOption=="Head" and target.Character:FindFirstChild("Head")) or target.Character:FindFirstChild("HumanoidRootPart")
            if part then
                local cam = workspace.CurrentCamera
                local currentCFrame = cam.CFrame
                local targetCFrame = CFrame.lookAt(cam.CFrame.Position, part.Position)
                cam.CFrame = currentCFrame:Lerp(targetCFrame, aimbotSmoothness)
            end
        end
    end
end)

-- ===== Infinity Jump =====
local infJumpConn
local function setInfJump(state)
    if state then
        infJumpConn = UserInputService.JumpRequest:Connect(function()
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end
        end)
    else
        if infJumpConn then infJumpConn:Disconnect() end
    end
end
createToggle("InfinityJump", setInfJump)

-- ===== Fly with Joystick =====
local flying = false
local flySpeed = 50
local flyConnection
local flyVelocity
local joystickInput = Vector3.new(0,0,0)

-- Create virtual joystick
local joystickBase = Instance.new("Frame")
joystickBase.Size = UDim2.new(0,100,0,100)
joystickBase.Position = UDim2.new(0,50,1,-150)
joystickBase.BackgroundColor3 = Color3.fromRGB(50,50,50)
joystickBase.BackgroundTransparency = 0.5
joystickBase.AnchorPoint = Vector2.new(0,0)
joystickBase.Parent = screenGui

local joystickKnob = Instance.new("Frame")
joystickKnob.Size = UDim2.new(0,50,0,50)
joystickKnob.Position = UDim2.new(0.5,-25,0.5,-25)
joystickKnob.BackgroundColor3 = Color3.fromRGB(200,200,200)
joystickKnob.AnchorPoint = Vector2.new(0.5,0.5)
joystickKnob.Parent = joystickBase
joystickKnob.ClipsDescendants = true
joystickKnob.Active = true

local dragging = false
joystickKnob.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
	end
end)

joystickKnob.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.Touch then
		local delta = input.Position - joystickBase.AbsolutePosition - Vector2.new(joystickBase.AbsoluteSize.X/2, joystickBase.AbsoluteSize.Y/2)
		local maxRadius = joystickBase.AbsoluteSize.X/2
		if delta.Magnitude > maxRadius then
			delta = delta.Unit * maxRadius
		end
		joystickKnob.Position = UDim2.new(0.5,delta.X,0.5,delta.Y)
		joystickInput = Vector3.new(delta.X/maxRadius,0,delta.Y/maxRadius)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch then
		dragging = false
		joystickKnob.Position = UDim2.new(0.5,0,0.5,0)
		joystickInput = Vector3.new(0,0,0)
	end
end)

local function setFly(state)
	local character = LocalPlayer.Character
	if not character then return end
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	flying = state
	if state then
		if not flyVelocity then
			flyVelocity = Instance.new("BodyVelocity")
			flyVelocity.MaxForce = Vector3.new(1e5,1e5,1e5)
			flyVelocity.Velocity = Vector3.new(0,0,0)
			flyVelocity.Parent = hrp
		end
		if flyConnection then flyConnection:Disconnect() end
		flyConnection = RunService.RenderStepped:Connect(function()
			if flying then
				local move = Vector3.new()
				if UserInputService.TouchEnabled then
					local cam = workspace.CurrentCamera
					local forward = cam.CFrame.LookVector
					local right = cam.CFrame.RightVector
					move = forward * joystickInput.Z + right * joystickInput.X + Vector3.new(0,0,0)
				else
					local camCFrame = workspace.CurrentCamera.CFrame
					if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + camCFrame.LookVector end
					if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move - camCFrame.LookVector end
					if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move - camCFrame.RightVector end
					if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + camCFrame.RightVector end
					if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move = move + Vector3.new(0,1,0) end
					if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then move = move - Vector3.new(0,1,0) end
				end
				if move.Magnitude > 0 then
					flyVelocity.Velocity = move.Unit * flySpeed
				else
					flyVelocity.Velocity = Vector3.new(0,0,0)
				end
			end
		end)
	else
		flying = false
		if flyConnection then flyConnection:Disconnect() end
		if flyVelocity then flyVelocity:Destroy() flyVelocity = nil end
	end
end
createToggle("Fly", setFly)

-- ===== Speed Slider =====
local speedValue = 50
local speedContainer = Instance.new("Frame")
speedContainer.Size = UDim2.new(1,-10,0,60)
speedContainer.BackgroundTransparency = 1
speedContainer.Parent = menuFrame

local speedLabel = Instance.new("TextLabel")
speedLabel.Size = UDim2.new(0,300,0,40)
speedLabel.Position = UDim2.new(0,10,0,0)
speedLabel.Text = "Speed: "..speedValue
speedLabel.TextColor3 = Color3.fromRGB(255,255,255)
speedLabel.Font = Enum.Font.SourceSansBold
speedLabel.TextSize = 24
speedLabel.BackgroundTransparency = 1
speedLabel.Parent = speedContainer

local sliderBar = Instance.new("Frame")
sliderBar.Size = UDim2.new(1,-20,0,20)
sliderBar.Position = UDim2.new(0,10,0,45)
sliderBar.BackgroundColor3 = Color3.fromRGB(70,70,70)
sliderBar.Parent = speedContainer

local sliderKnob = Instance.new("TextButton")
sliderKnob.Size = UDim2.new(0,30,1,0)
sliderKnob.Position = UDim2.new(0,0,0,0)
sliderKnob.BackgroundColor3 = Color3.fromRGB(200,200,200)
sliderKnob.Text = ""
sliderKnob.Parent = sliderBar

local draggingSlider = false
sliderKnob.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		draggingSlider = true
	end
end)
UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		draggingSlider = false
	end
end)

RunService.RenderStepped:Connect(function()
	if draggingSlider then
		local mouseX = UserInputService:GetMouseLocation().X
		local barPos = sliderBar.AbsolutePosition.X
		local barSize = sliderBar.AbsoluteSize.X
		local percent = math.clamp((mouseX-barPos)/barSize,0,1)
		speedValue = 50 + percent*2950
		sliderKnob.Position = UDim2.new(percent,0,0,0)
		speedLabel.Text = "Speed: "..math.floor(speedValue)
		local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
		if humanoid then humanoid.WalkSpeed = speedValue end
	end
end)

-- ===== ESP REFRESH LOOP =====
task.spawn(function()
	while true do
		if features["ESP"] then
			for _,player in ipairs(Players:GetPlayers()) do
				if player.Character then highlightCharacter(player.Character) end
			end
			print("hi")
		end
		task.wait(1)
	end
end)

-- ===== BIND NEW PLAYERS =====
local function bindPlayer(player)
	if player.Character and features["ESP"] then highlightCharacter(player.Character) end
	player.CharacterAdded:Connect(function(character)
		if features["ESP"] then highlightCharacter(character) end
	end)
end
for _,player in ipairs(Players:GetPlayers()) do bindPlayer(player) end
Players.PlayerAdded:Connect(bindPlayer)
